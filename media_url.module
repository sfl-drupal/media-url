<?php

/**
 * @file
 * Display media URL at various places.
 *
 * @author: Emmanuel Milou <emmanuel.milou@savoirfairelinux.com>
 */

// By default, enable URL encoding
define('MEDIA_URL_DEFAULT_ENCODING', 1);

define('MEDIA_URL_DISPLAY_UPDATE', 1);
define('MEDIA_URL_DISPLAY_VIEW', 2);

/**
 * Implements hook_menu().
 */
function media_url_menu() {
  $items = array();
  $items['admin/config/media/media_url'] = array(
    'title' => 'Media URL',
    'description' => "Configure la manière de récupérer les URLs des media.",
    'access arguments' => array('administer site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_url_config'),
  );
  return $items;
}

/**
 * Admin page callback function.
 */
function media_url_config($form, &$form_state) {
 $form['media_url_encoding'] = array(
    '#type' => 'fieldset',
    '#title' => t('URL encoding'),
    '#description' => t('Configure URL encoding.'),
  );

  $form['media_url_encoding']['media_url_default_encoding'] = array(
    '#type' => 'checkbox',
    '#title' => t('By default, display URL as encoded'),
    '#default_value' => variable_get('media_url_default_encoding', MEDIA_URL_DEFAULT_ENCODING),
  );

 $form['media_url_display'] = array(
    '#type' => 'fieldset',
    '#title' => t('System messages'),
    '#description' => t('Configure where you want to display the media URL.'),
  );
  $form['media_url_display']['media_url_display_action'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Display media URL in the system messages'),
    '#options' => array(
      MEDIA_URL_DISPLAY_UPDATE => t('During creation and update of a file entity'),
      MEDIA_URL_DISPLAY_VIEW => t('On the file entity page'),
    ),
    '#default_value' => variable_get('media_url_display_action', array()),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for file_entity_edit().
 */
function media_url_form_file_entity_edit_alter(&$form, $form_state) {
  // Make sure this does not show up on the delete confirmation form.
  if (empty($form_state['confirm_delete'])) {
    // Use a lightweight version if we are editing multiple files at once
    $edit_multiple =  strpos($form['#action'], 'edit-multiple');
    $file = $form_state['file'];

    $form['media_url'] = array(
      '#type' => 'fieldset',
      '#title' => t('Media URL'),
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('media-url-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'media_url') . '/copy.js'),
      ),
      '#access' => user_access('administer files'),
      '#weight' => -30,
      '#tree' => TRUE,
      '#element_validate' => array('media_url_element_validate'),
    );

    if(!$edit_multiple) {
      $form['media_url']['encode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Encode URL'),
        '#description' => t('Whether to display and use the encoded or raw url.'),
        '#default_value' => variable_get('media_url_default_encoding', MEDIA_URL_DEFAULT_ENCODING),
        '#weight' => -20,
      );
    }

    $form['media_url']['uri'] = array(
      '#type' => 'textarea',
      '#title' => t('Media URL'),
      '#rows'=> 3, 
      '#default_value' => media_url_encode_file_uri($file),
      '#description' => t('CTRL-C to copy to the clipboard.'),
      '#weight' => -10,
      '#attributes' => array(
        'readonly'=>'readonly',
        'style'=>'background: none repeat scroll 0 0 #EAEAEA;'
      ),
    );

    if(!$edit_multiple) {
      $form['media_url']['copy'] = array(
        '#type' => 'button',
        '#default_value' => t('Copy to clipboard'),
        '#weight' => -5,
      );
    }
  }
}

function media_url_element_validate($element, &$form_state, $complete_form) {
  unset($form_state['values']['media_url']);
}

/**
 * Implements hook_entity_view().
 */
function media_url_entity_view($entity, $type, $view_mode, $langcode) {
  if($type == 'file') {
    $display = variable_get('media_url_display_action', array());
    if($display[MEDIA_URL_DISPLAY_VIEW] != 0) {
      drupal_set_message(t('Media URL: %url', array('%url' => media_url_encode_file_uri($entity))));
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function media_url_entity_update($entity, $type) {
  if($type == 'file') {
    $display = variable_get('media_url_display_action', array());
    if($display[MEDIA_URL_DISPLAY_UPDATE] != 0) {
      drupal_set_message(t('Media URL: %url', array('%url' => media_url_encode_file_uri($entity))));
    }
  }
}

/**
 * Build the file URL and encode it if necessary.
 *
 * @param $file
 *   A file entity.
 *
 * @return 
 *   The file URL or FALSE.
 */
function media_url_encode_file_uri($file) {
  $do_encode = variable_get('media_url_default_encoding', MEDIA_URL_DEFAULT_ENCODING);

  if(!$file->uri) {
    return FALSE;
  }

  // Build the file URL from the URI
  $url = file_create_url($file->uri);

  // Encode the URL if specified in the config
  if($do_encode) {
    $url = urlencode($url);
  }

  return $url;
}
